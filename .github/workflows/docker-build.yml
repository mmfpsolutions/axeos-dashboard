name: Build and Push Multi-Arch Docker Image

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: linux/amd64,linux/arm64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest
            type=sha,prefix={{branch}}-

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            GOCACHE=/root/.cache/go-build
            GOMODCACHE=/root/go/pkg/mod

      - name: Build Summary
        run: |
          echo "‚úÖ Successfully built and pushed multi-arch Docker images!"
          echo ""
          echo "üì¶ Images available at:"
          echo "   https://github.com/${{ github.repository }}/pkgs/container/$(basename ${{ github.repository }})"
          echo ""
          echo "üè∑Ô∏è  Tags:"
          echo "   - ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
          echo "   - ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main-<sha>"
          echo ""
          echo "üíª Pull and run:"
          echo "   docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
          echo "   docker run -d -p 3000:3000 -v ./config:/app/config -v ./data:/app/data ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
